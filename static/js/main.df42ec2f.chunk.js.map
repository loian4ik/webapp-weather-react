{"version":3,"sources":["components/info.js","components/form.js","components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","className","city","country","temp","pressure","sunset","error","API_KEY","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","sys","date","Date","setTime","sunset_date","getHours","getMinutes","getSeconds","setState","main","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAQeA,EANF,kBACP,gCACE,6CACA,uECKOC,EARF,SAAAC,GAAK,OAChB,uBAAMC,SAAUD,EAAME,cAAtB,UACF,uBAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,cAC3C,sDCWmBC,EAdH,SAAAN,GAAK,OACrB,sBAAKO,UAAU,YAAf,UACYP,EAAMQ,MACN,gCACA,uCAAUR,EAAMQ,KAAhB,KAAwBR,EAAMS,WAC9B,8CAAiBT,EAAMU,QACvB,2CAAcV,EAAMW,YACpB,yCAAYX,EAAMY,aAGpB,mBAAGL,UAAU,QAAb,SAAuBP,EAAMa,YCPjCC,EAAU,mCA0EDC,E,4MAtEbC,MAAO,CACNN,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,WAAOI,G,EAETC,e,uCAAiB,WAAOC,GAAP,yBAAAC,EAAA,yDACfD,EAAEE,mBACEb,EAAOW,EAAEG,OAAOC,SAASf,KAAKgB,OAFnB,iCAMbC,MAAM,oDAAD,OAAqDjB,EAArD,kBAAmEM,EAAnE,kBANQ,cAKTY,EALS,gBAOKA,EAAQC,OAPb,OAORC,EAPQ,OASVhB,EAASgB,EAAKC,IAAIjB,QAClBkB,EAAO,IAAIC,MACVC,QAAQpB,GACTqB,EAAcH,EAAKI,WAAa,IAAMJ,EAAKK,aAAe,IAAML,EAAKM,aAEzE,EAAKC,SAAS,CACZ3B,KAAMkB,EAAKU,KAAK5B,KAChBF,KAAMoB,EAAKxB,KACXK,QAASmB,EAAKC,IAAIpB,QAClBE,SAAUiB,EAAKU,KAAK3B,SACpBC,OAAQqB,EACRpB,WAAOI,IApBK,wBAuBd,EAAKoB,SAAS,CACZ3B,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,MAAO,+BA7BK,4C,6GAmCd,OACE,qBAAKN,UAAU,UAAf,SACA,qBAAKA,UAAU,OAAf,SACC,qBAAKA,UAAU,YAAf,SACC,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,cAAC,EAAD,MAEF,sBAAKA,UAAU,gBAAf,UACA,cAAC,EAAD,CAAML,cAAeqC,KAAKrB,iBAC1B,cAAC,EAAD,CACAR,KAAM6B,KAAKvB,MAAMN,KACjBF,KAAM+B,KAAKvB,MAAMR,KACjBC,QAAS8B,KAAKvB,MAAMP,QACpBE,SAAU4B,KAAKvB,MAAML,SACrBC,OAAQ2B,KAAKvB,MAAMJ,OACnBC,MAAO0B,KAAKvB,MAAMH,wB,GA7DV2B,IAAMC,WCKTC,G,YAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.df42ec2f.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Info = () => (\n      <div>\n        <h2>Weather app</h2>\n        <p>Find out the weather in your city!</p>\n      </div>\n    )\nexport default Info;\n","import React from \"react\";\n\nconst Form = props => (\n  <form onSubmit={props.weatherMethod}>\n<input type=\"text\" name=\"city\" placeholder=\"Ð¡ity\"/>\n<button> Get weather</button>\n  </form>\n\n)\n\nexport default Form;\n","import React from \"react\";\n\nconst Weather = props => (\n<div className=\"infoWeath\">\n          { props.city &&\n            <div>\n            <p>City: {props.city}, {props.country}</p>\n            <p>Temperature: {props.temp}</p>\n            <p>Pressure: {props.pressure}</p>\n            <p>Sunset: {props.sunset}</p>\n          </div>\n          }\n          <p className=\"error\">{ props.error }</p>\n          </div>\n        );\n\n    export default Weather;\n","import React from \"react\";\nimport Info from \"./components/info\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"ee3f4c01a33c5a1e1724c350dbc2eedd\";\n\nclass App extends React.Component {\n\n  state ={\n   temp: undefined,\n   city: undefined,\n   country: undefined,\n   pressure: undefined,\n   sunset: undefined,\n   error: undefined\n }\n gettingWeather = async (e) => {\n   e.preventDefault();\n   var city = e.target.elements.city.value;\n\n   if(city) {\n   const api_url = await\n     fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n    const data = await api_url.json();\n\n    var sunset = data.sys.sunset;\n    var date = new Date();\n    date.setTime(sunset);\n    var sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n\n    this.setState({\n      temp: data.main.temp,\n      city: data.name,\n      country: data.sys.country,\n      pressure: data.main.pressure,\n      sunset: sunset_date,\n      error: undefined\n    });\n  } else {\n    this.setState({\n      temp: undefined,\n      city: undefined,\n      country: undefined,\n      pressure: undefined,\n      sunset: undefined,\n      error: \"Enter the name of the city\"\n      });\n    }\n  }\n\n  render(){\n    return(\n      <div className=\"wrapper\">\n      <div className=\"main\">\n       <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-sm-5 info\">\n            <Info />\n          </div>\n          <div className=\"col-sm-7 form\">\n          <Form weatherMethod={this.gettingWeather}/>\n          <Weather\n          temp={this.state.temp}\n          city={this.state.city}\n          country={this.state.country}\n          pressure={this.state.pressure}\n          sunset={this.state.sunset}\n          error={this.state.error}\n             />\n           </div>\n          </div>\n         </div>\n         </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}